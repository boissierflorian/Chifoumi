#ifndef GAME_HPP_
#define GAME_HPP_

////////////////////////////////////////////////////////////
// Headers
//////////////////////////////////////////////////////////////
#include "Random.hpp"
#include <string>

////////////////////////////////////////////////////////////
// \brief Possible choices for each battle
//
////////////////////////////////////////////////////////////
enum Choice { ROCK = 0, PAPER = 1, SCISSORS = 2 };


////////////////////////////////////////////////////////////
// \brief Game instance
// 
////////////////////////////////////////////////////////////
class Game
{
public:
  ////////////////////////////////////////////////////////////
  // \brief Default constructor
  //
  ////////////////////////////////////////////////////////////
  Game();

  ////////////////////////////////////////////////////////////
  // \brief Returns whether the game is running
  //
  ////////////////////////////////////////////////////////////
  bool isRunning() const;

  ////////////////////////////////////////////////////////////
  // \brief Get the player selection from console
  //
  ////////////////////////////////////////////////////////////
  void getPlayerInput();

  ////////////////////////////////////////////////////////////
  // \brief Compute the final score and returns the result
  //
  ////////////////////////////////////////////////////////////
  int play(Choice playerInput);

  ////////////////////////////////////////////////////////////
  // \brief Returns the last result
  //
  ////////////////////////////////////////////////////////////
  const std::string getLastResult() const;

  ////////////////////////////////////////////////////////////
  // \brief Returns the last IA move
  //
  ////////////////////////////////////////////////////////////
  Choice getIAChoice() const;
  
  ////////////////////////////////////////////////////////////
  // \brief Returns the playerMove move
  //
  ////////////////////////////////////////////////////////////
  Choice getPlayerChoice() const;
private:
  ////////////////////////////////////////////////////////////
  // \brief Converts the given choice to it's string representation
  //
  ////////////////////////////////////////////////////////////
  const std::string priv_convertChoice(Choice c) const;
  
  ////////////////////////////////////////////////////////////
  // Data members
  ////////////////////////////////////////////////////////////
  bool   m_running;         ///< Whether the game is still running
  Choice m_playerChoice;    ///< Player selection
  Choice m_IAChoice;        ///< IA Selection
  Random m_random;          ///< Random Instance
  std::string m_lastResult; ///< Last report
};

#endif
