////////////////////////////////////////////////////////////
///
/// \brief Base game class of chifoumi
/// \file Game.hpp
/// \author Florian
/// \date 11 mai 2017
///
////////////////////////////////////////////////////////////

#ifndef GAME_HPP_
#define GAME_HPP_

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Random.hpp"
#include <string>


////////////////////////////////////////////////////////////
/// \brief Possible moves
///
////////////////////////////////////////////////////////////
enum Choice
{
  ROCK = 0,
  PAPER = 1,
  SCISSORS = 2
};


////////////////////////////////////////////////////////////
/// \brief Game instance
///
////////////////////////////////////////////////////////////
class Game
{
public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  Game();

  ////////////////////////////////////////////////////////////
  /// \brief Checks if the game is currently running
  ///
  /// \return True if the game is running, false otherwise
  ///
  ////////////////////////////////////////////////////////////
  bool isRunning() const;

  ////////////////////////////////////////////////////////////
  /// \brief Gets the player input from the standard input
  ///
  ////////////////////////////////////////////////////////////
  void getPlayerInput();
  
  ////////////////////////////////////////////////////////////
  /// \brief Compute the final score and returns the result
  ///
  /// \param playerInput player choice
  ///
  /// \return the result of the round -1 lost, 0 draw and 1 won
  ///
  ////////////////////////////////////////////////////////////
  int play(Choice playerInput);

  ////////////////////////////////////////////////////////////
  /// \brief Returns the last result as a string
  ///
  /// \return the last result
  ///
  ////////////////////////////////////////////////////////////
  const std::string getLastResult() const;

  ////////////////////////////////////////////////////////////
  /// \brief Returns the last IA Choice
  ///
  /// \return the last IA Choice
  ///
  ////////////////////////////////////////////////////////////
  Choice getIAChoice() const;

  ////////////////////////////////////////////////////////////
  /// \brief Returns the last player move
  ///
  /// \return the last player move
  ///
  ////////////////////////////////////////////////////////////
  Choice getPlayerChoice() const;
  
private:
  //////////////////////////////////////////////////////////
  // \brief Converts the given choice to it's string representation
  //
  //////////////////////////////////////////////////////////
  const std::string priv_convertChoice(Choice c) const;
  
  //////////////////////////////////////////////////////////
  // Data member
  ////////////////////////////////////////////////////////// 
  bool   m_running;         ///< Whether the game is still running
  Choice m_playerChoice;    ///< Player selection
  Choice m_IAChoice;        ///< IA Selection
  Random m_random;          ///< Random Instance
  std::string m_lastResult; ///< Last report
};

#endif
